{"version":3,"sources":["debounce.js","throttle.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["/**\n * @desc - 関数などのイベントを任意の時間遅延させます。\n * @link - https://davidwalsh.name/javascript-debounce-function\n * @example\n * $(window).on('resize', debounce(function() {\n *   func1();\n *   func2();\n * }, 200));\n */\ndebounce = function(func, wait, immediate) {\n  var timeout;\n\n  return function() {\n    var context = this;\n    var args = arguments;\n\n    var later = function() {\n      timeout = null;\n      if ( !immediate ) {\n        func.apply(context, args);\n      }\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait || 200);\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n};\n","/**\n * @desc - 関数などのイベントを任意の時間が経つたびに実行します。\n * @link - https://gist.github.com/edwinwebb/e71bde8b00ff40f3f046\n * @example\n * $(window).on('scroll', throttle(function() {\n * func();\n * }, 200));\n */\nfunction throttle(func, wait, options) {\n  var _ = {\n    now :  Date.now || function() {\n      return new Date().getTime();\n    }\n  }\n  var context, args, result;\n  var timeout = null;\n  var previous = 0;\n  if (!options) options = {};\n  var later = function() {\n    previous = options.leading === false ? 0 : _.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  return function() {\n    var now = _.now();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n};\n"]}